{
  "rules": {
    "departures": {
      ".read": "auth !== null",
      ".indexOn": [
        "dateTime",
        "negativeTimestamp",
        "immatriculation"
      ],
      "$departure_id": {
        ".write": "auth !== null && (!root.child('settings/lockDate').exists() || (!data.exists() && newData.exists() && newData.child('negativeTimestamp').val() * -1 > root.child('settings/lockDate').val() + 1000 * 60 * 60 * 24) || (data.exists() && !newData.exists() && data.child('negativeTimestamp').val() * -1 > root.child('settings/lockDate').val() + 1000 * 60 * 60 * 24) || (data.exists() && newData.exists() && data.child('negativeTimestamp').val() * -1 > root.child('settings/lockDate').val() + 1000 * 60 * 60 * 24 && newData.child('negativeTimestamp').val() * -1 > root.child('settings/lockDate').val() + 1000 * 60 * 60 * 24))",
        ".validate": "newData.hasChildren(['aircraftType', 'dateTime', 'departureRoute', 'duration', 'email', 'firstname', 'flightType', 'immatriculation', 'lastname', 'location', 'mtow', 'aircraftCategory', 'negativeTimestamp'])",
        "aircraftType": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "carriageVoucher": {
          ".validate": "newData.parent().child('passengerCount').val() === 0 || (newData.val() === 'yes' || newData.val() === 'no')"
        },
        "dateTime": {
          ".validate": "newData.isString() && newData.val().matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/)"
        },
        "departureRoute": {
          ".validate": "{departureRoute}"
        },
        "duration": {
          ".validate": "newData.isString() && newData.val().matches(/^\\d{2}:\\d{2}$/)"
        },
        "email": {
          ".validate": "newData.isString() && newData.val().matches(/^[a-zA-Z0-9._+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/)"
        },
        "firstname": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "flightType": {
          ".validate": "{flightType}"
        },
        "immatriculation": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "lastname": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "location": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "memberNr": {
          ".validate": "newData.isString() && newData.val().matches(/^\\d+$/)"
        },
        "mtow": {
          ".validate": "newData.isNumber() && newData.val() > 0"
        },
        "aircraftCategory": {
          ".validate": "{aircraftCategory}"
        },
        "negativeTimestamp": {
          ".validate": "newData.isNumber() && newData.val() < 0"
        },
        "passengerCount": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "phone": {
          ".validate": "newData.isString()"
        },
        "remarks": {
          ".validate": "newData.isString()"
        },
        "route": {
          ".validate": "newData.isString()"
        },
        "runway": {
          ".validate": "{runway}"
        },
        "$other": {
          ".validate": false
        }
      }
    },
    "arrivals": {
      ".read": "auth !== null",
      ".indexOn": [
        "dateTime",
        "negativeTimestamp",
        "immatriculation"
      ],
      "$arrival_id": {
        ".write": "auth !== null && (!root.child('settings/lockDate').exists() || (!data.exists() && newData.exists() && newData.child('negativeTimestamp').val() * -1 > root.child('settings/lockDate').val() + 1000 * 60 * 60 * 24) || (data.exists() && !newData.exists() && data.child('negativeTimestamp').val() * -1 > root.child('settings/lockDate').val() + 1000 * 60 * 60 * 24) || (data.exists() && newData.exists() && data.child('negativeTimestamp').val() * -1 > root.child('settings/lockDate').val() + 1000 * 60 * 60 * 24 && newData.child('negativeTimestamp').val() * -1 > root.child('settings/lockDate').val() + 1000 * 60 * 60 * 24))",
        ".validate": "newData.hasChildren(['aircraftType', 'arrivalRoute', 'dateTime', 'email', 'firstname', 'flightType', 'immatriculation', 'landingCount', 'lastname', 'location', 'mtow', 'aircraftCategory', 'negativeTimestamp'])",
        "aircraftType": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "arrivalRoute": {
          ".validate": "{arrivalRoute}"
        },
        "dateTime": {
          ".validate": "newData.isString() && newData.val().matches(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/)"
        },
        "email": {
          ".validate": "newData.isString() && newData.val().matches(/^[a-zA-Z0-9._+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/)"
        },
        "firstname": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "flightType": {
          ".validate": "{flightType}"
        },
        "goAroundCount": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "goAroundFeeSingle": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "goAroundFeeTotal": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "immatriculation": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "landingCount": {
          ".validate": "newData.isNumber() && newData.val() > 0"
        },
        "landingFeeSingle": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "landingFeeTotal": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "lastname": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "location": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "memberNr": {
          ".validate": "newData.isString() && newData.val().matches(/^\\d+$/)"
        },
        "mtow": {
          ".validate": "newData.isNumber() && newData.val() > 0"
        },
        "aircraftCategory": {
          ".validate": "{aircraftCategory}"
        },
        "negativeTimestamp": {
          ".validate": "newData.isNumber() && newData.val() < 0"
        },
        "passengerCount": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "phone": {
          ".validate": "newData.isString()"
        },
        "remarks": {
          ".validate": "newData.isString()"
        },
        "runway": {
          ".validate": "{runway}"
        },
        "$other": {
          ".validate": false
        }
      }
    },
    "aircrafts": {
      ".read": "auth !== null",
      ".write": "auth !== null && root.child('admins/' + auth.uid).exists()",
      ".indexOn": [
        "type"
      ]
    },
    "users": {
      ".read": "auth !== null",
      ".write": "auth !== null && root.child('admins/' + auth.uid).exists()",
      ".indexOn": [
        "memberNr"
      ]
    },
    "aerodromes": {
      ".read": "auth !== null",
      ".write": "auth !== null && root.child('admins/' + auth.uid).exists()",
      ".indexOn": [
        "name"
      ]
    },
    "settings": {
      "lockDate": {
        ".read": "auth !== null",
        ".write":  "auth !== null && root.child('admins/' + auth.uid).exists()"
      },
      "aircrafts": {
        "homeBase": {
          ".read": "auth !== null",
          ".write":  "auth !== null && root.child('admins/' + auth.uid).exists()"
        },
        "club": {
          ".read": "auth !== null",
          ".write":  "auth !== null && root.child('admins/' + auth.uid).exists()"
        },
        "custom": {
          ".read": "auth !== null && root.child('admins/' + auth.uid).exists()",
          ".write": false
        },
        "$other": {
          ".validate": false
        }
      },
      "$other": {
        ".validate": false
      }
    },
    "messages": {
      ".read": "auth !== null && root.child('admins/' + auth.uid).exists()",
      ".indexOn": [
        "negativeTimestamp"
      ],
      "$message_id": {
        ".write": "auth !== null && !data.exists() && newData.exists()",
        ".validate": "newData.hasChildren(['name', 'email', 'phone', 'message', 'timestamp', 'negativeTimestamp'])",
        "name": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "email": {
          ".validate": "newData.isString() && newData.val().matches(/^(([^<>()\\[\\]\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)"
        },
        "phone": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "message": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "timestamp": {
          ".validate": "newData.isNumber() && newData.val() > 0 && newData.val() === newData.parent().child('negativeTimestamp').val() * -1"
        },
        "negativeTimestamp": {
          ".validate": "newData.isNumber() && newData.val() < 0 && newData.val() === newData.parent().child('timestamp').val() * -1"
        },
        "$other": {
          ".validate": false
        }
      }
    },
    "logins": {
      ".write": false,
      "$login_id": {
        ".read": "auth !== null && $login_id === auth.uid",
        "admin": {
          ".validate": "newData.isBoolean()"
        },
        "links": {
          ".validate": "newData.isBoolean()"
        },
        "$other": {
          ".validate": false
        }
      }
    },
    "status": {
      ".read": "true",
      ".indexOn": [
        "timestamp"
      ],
      "$status_id": {
        ".write": "auth !== null && root.child('admins/' + auth.uid).exists() && !data.exists() && newData.exists()",
        ".validate": "newData.hasChildren(['status', 'details', 'timestamp', 'by'])",
        "status": {
          ".validate": "newData.val() === 'open' || newData.val() === 'restricted' || newData.val() === 'closed'"
        },
        "details": {
          ".validate": "newData.isString()"
        },
        "timestamp": {
          ".validate": "newData.isNumber() && newData.val() > 0"
        },
        "by": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "$other": {
          ".validate": false
        }
      }
    },
    "card-payments": {
      "$card_payment_id": {
        ".read": "auth !== null",
        ".write": "auth !== null && newData.exists()",
        ".validate": "newData.hasChildren(['amount', 'currency', 'arrivalReference', 'timestamp', 'status'])",
        "currency": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "amount": {
          ".validate": "newData.isNumber() && newData.val() > 0"
        },
        "timestamp": {
          ".validate": "newData.isNumber() && newData.val() > 0"
        },
        "arrivalReference": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "status": {
          ".validate": "newData.val() === 'pending' || newData.val() === 'success' || newData.val() === 'failure' || newData.val() === 'cancelled'"
        },
        "$other": {
          ".validate": false
        }
      }
    }
  }
}
